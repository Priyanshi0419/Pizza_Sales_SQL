-- This SQL project analyzes a pizza sales dataset to uncover business insights.
-- All queries are based on the project from the WsCube Tech YouTube video.

-- Create the database
CREATE DATABASE pizza_hut;
USE pizza_hut;

-- (Note: The video demonstrates importing CSVs using the MySQL Workbench wizard.
-- You would first create the tables with the correct data types, then import.)

-- Let's assume the tables are created as follows:
-- CREATE TABLE orders (
--     order_id INT NOT NULL,
--     order_date DATE NOT NULL,
--     order_time TIME NOT NULL,
--     PRIMARY KEY (order_id)
-- );
--
-- CREATE TABLE order_details (
--     order_details_id INT NOT NULL,
--     order_id INT NOT NULL,
--     pizza_id TEXT NOT NULL,
--     quantity INT NOT NULL,
--     PRIMARY KEY (order_details_id)
-- );
--
-- CREATE TABLE pizzas (
--     pizza_id VARCHAR(50) NOT NULL,
--     pizza_type_id VARCHAR(50) NOT NULL,
--     size VARCHAR(10) NOT NULL,
--     price DECIMAL(10, 2) NOT NULL,
--     PRIMARY KEY (pizza_id)
-- );
--
-- CREATE TABLE pizza_types (
--     pizza_type_id VARCHAR(50) NOT NULL,
--     name VARCHAR(100) NOT NULL,
--     category VARCHAR(50) NOT NULL,
--     ingredients TEXT NOT NULL,
--     PRIMARY KEY (pizza_type_id)
-- );
-- ---------------------------------
-- --- BASIC ANALYSIS QUESTIONS ---
-- ---------------------------------

-- Q1: Retrieve the total number of orders placed.
SELECT 
    COUNT(order_id) AS total_orders
FROM
    orders;

-- Q2: Calculate the total revenue generated from pizza sales.
SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            2) AS total_revenue
FROM
    order_details
        JOIN
    pizzas ON pizzas.pizza_id = order_details.pizza_id;

-- Q3: Identify the highest-priced pizza.
SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;

-- Q4: Identify the most common pizza size ordered.
SELECT 
    pizzas.size,
    COUNT(order_details.order_details_id) AS order_count
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizzas.size
ORDER BY order_count DESC
LIMIT 1;

-- Q5: List the top 5 most ordered pizza types along with their quantities.
SELECT 
    pizza_types.name, SUM(order_details.quantity) AS total_quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY total_quantity DESC
LIMIT 5;

-- ---------------------------------------
-- --- INTERMEDIATE ANALYSIS QUESTIONS ---
-- ---------------------------------------

-- Q6: Find the total quantity of each pizza category ordered.
SELECT 
    pizza_types.category,
    SUM(order_details.quantity) AS total_quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY total_quantity DESC;

-- Q7: Determine the distribution of orders by hour of the day.
SELECT 
    HOUR(order_time) AS hour_of_day,
    COUNT(order_id) AS order_count
FROM
    orders
GROUP BY HOUR(order_time)
ORDER BY order_count DESC;

-- Q8: Find the category-wise distribution of pizzas.
SELECT 
    category, COUNT(name) AS pizza_count
FROM
    pizza_types
GROUP BY category;

-- Q9: Calculate the average number of pizzas ordered per day.
-- We use a subquery to first find the total quantity per day.
SELECT 
    ROUND(AVG(daily_quantity), 0) AS avg_pizzas_per_day
FROM
    (SELECT 
        orders.order_date,
            SUM(order_details.quantity) AS daily_quantity
    FROM
        orders
    JOIN order_details ON orders.order_id = order_details.order_id
    GROUP BY orders.order_date) AS daily_sales;

-- Q10: Determine the top 3 most ordered pizza types based on revenue.
SELECT 
    pizza_types.name,
    SUM(order_details.quantity * pizzas.price) AS total_revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY total_revenue DESC
LIMIT 3;

-- -----------------------------------
-- --- ADVANCED ANALYSIS QUESTIONS ---
-- -----------------------------------

-- Q11: Calculate the percentage contribution of each pizza category to total revenue.
SELECT 
    pizza_types.category,
    ROUND(SUM(order_details.quantity * pizzas.price) / (SELECT 
                    ROUND(SUM(order_details.quantity * pizzas.price),
                                2)
                FROM
                    order_details
                        JOIN
                    pizzas ON pizzas.pizza_id = order_details.pizza_id) * 100,
            2) AS percentage_contribution
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY percentage_contribution DESC;

-- Q12: Analyze the cumulative revenue generated over time (by date).
-- We use a window function (SUM() OVER...) to get the cumulative sum.
SELECT 
    order_date,
    SUM(revenue) AS daily_revenue,
    SUM(SUM(revenue)) OVER (ORDER BY order_date) AS cumulative_revenue
FROM
    (SELECT 
        orders.order_date,
            SUM(order_details.quantity * pizzas.price) AS revenue
    FROM
        order_details
    JOIN pizzas ON order_details.pizza_id = pizzas.pizza_id
    JOIN orders ON orders.order_id = order_details.order_id
    GROUP BY orders.order_date) AS daily_sales
GROUP BY order_date;

-- Q13: Determine the top 3 most ordered pizza types based on revenue for each pizza category.
-- We use a Common Table Expression (CTE) and a Window Function (ROW_NUMBER()) to rank pizzas within each category.
WITH CategoryRevenue AS (
    SELECT 
        pizza_types.category,
        pizza_types.name,
        SUM(order_details.quantity * pizzas.price) AS total_revenue
    FROM 
        pizza_types
    JOIN 
        pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
    JOIN 
        order_details ON order_details.pizza_id = pizzas.pizza_id
    GROUP BY 
        pizza_types.category, pizza_types.name
),
RankedRevenue AS (
    SELECT 
        category,
        name,
        total_revenue,
        -- Rank pizzas within each category based on revenue
        ROW_NUMBER() OVER (PARTITION BY category ORDER BY total_revenue DESC) AS rn
    FROM 
        CategoryRevenue
)
SELECT 
    category,
    name,
    total_revenue
FROM 
    RankedRevenue
WHERE 
    rn <= 3;

